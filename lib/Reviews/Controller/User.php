<?php
/**
 * Zikula Application Framework
 *
 * @copyright (c) 2002, Zikula Development Team
 * @link http://www.zikula.org
 * @version $Id: User.php 445 2010-07-06 16:09:10Z drak $
 * @license GNU/GPL - http://www.gnu.org/copyleft/gpl.html
 * @package Zikula_Value_Addons
 * @subpackage Reviews
 */

class Reviews_Controller_User extends Reviews_Controller_Base_User
{
    /**
     * the main user function
     *
     * @param integer startnum starting number of the page
     * @return string HTML output
     */
    public function main()
    {
        // Security check
        if (!SecurityUtil::checkPermission('Reviews::', '::', ACCESS_OVERVIEW)) {
            return LogUtil::registerPermissionError();
        }

        // Get parameters from whatever input we need
        $startnum = (int)FormUtil::getPassedValue('startnum', 1, 'REQUEST');

        // get all module vars for later use
        $modvars = ModUtil::getVar('Reviews');

        // Get all matching reviews
        $recentitems = ModUtil::apiFunc('Reviews', 'selection', 'getEntities',
                array('startnum' => $startnum,
                'orderby' => 'createdDate DESC',
                'numitems' => 10));
        
        // Get the most popular reviews
        $popularitems = ModUtil::apiFunc('Reviews', 'selection', 'getEntities',
                array('startnum' => $startnum,
                'orderby' => 'hits DESC',
                'numitems' => 10));

        // assign item arrays to template
        $this->view->assign('lang', ZLanguage::getLanguageCode());
        $this->view->assign($modvars);
        $this->view->assign('shorturls',System::getVar('shorturls'));
        $this->view->assign('recentreviews', $recentitems);
        $this->view->assign('popularreviews', $popularitems);

        // Return the output that has been generated by this function
        return $this->view->fetch('user/main.tpl');
    }

    /**
     * This method provides a generic handling of all edit requests.
     *
     * @param string  $ot           Treated object type.
     * @param string  $tpl          Name of alternative template (for alternative display options, feeds and xml output)
     * @param boolean $raw          Optional way to display a template instead of fetching it (needed for standalone output)
     *
     * @return mixed Output.
     */
    public function edit()
    {
        $id = $this->request->query->filter('id', 0);
        if ($id > 0) {
            $url = ModUtil::url($this->name, 'user', 'view');
            return System::redirect($url);
          
        }
        $controllerHelper = new Reviews_Util_Controller($this->serviceManager);
    
        // parameter specifying which type of objects we are treating
        $objectType = $this->request->query->filter('ot', 'review', FILTER_SANITIZE_STRING);
        $utilArgs = array('controller' => 'user', 'action' => 'edit');
        if (!in_array($objectType, $controllerHelper->getObjectTypes('controllerAction', $utilArgs))) {
            $objectType = $controllerHelper->getDefaultObjectType('controllerAction', $utilArgs);
        }
        $this->throwForbiddenUnless(SecurityUtil::checkPermission($this->name . ':' . ucwords($objectType) . ':', '::', ACCESS_EDIT), LogUtil::getErrorMsgPermission());
    
        // create new Form reference
        $view = FormUtil::newForm($this->name, $this);
    
        // build form handler class name
        $handlerClass = $this->name . '_Form_Handler_User_' . ucfirst($objectType) . '_Edit';
    
        // determine the output template
        $viewHelper = new Reviews_Util_View($this->serviceManager);
        $template = $viewHelper->getViewTemplate($this->view, 'user', $objectType, 'edit', array());
    
        // execute form using supplied template and page event handler
        return $view->execute($template, new $handlerClass());
    }
    
    /**
     * view items
     *
     * @return string HTML output
     */
    public function view()
    {
        // Security check
        if (!SecurityUtil::checkPermission('Reviews::', '::', ACCESS_OVERVIEW)) {
            return LogUtil::registerPermissionError();
        }
        
        $controllerHelper = new Reviews_Util_Controller($this->serviceManager);
        
        // parameter specifying which type of objects we are treating
        $objectType = $this->request->query->filter('ot', 'review', FILTER_SANITIZE_STRING);
        $utilArgs = array('controller' => 'user', 'action' => 'view');
        if (!in_array($objectType, $controllerHelper->getObjectTypes('controllerAction', $utilArgs))) {
            $objectType = $controllerHelper->getDefaultObjectType('controllerAction', $utilArgs);
        }
        $this->throwForbiddenUnless(SecurityUtil::checkPermission($this->name . ':' . ucwords($objectType) . ':', '::', ACCESS_READ), LogUtil::getErrorMsgPermission());
        $entityClass = $this->name . '_Entity_' . ucwords($objectType);
        $repository = $this->entityManager->getRepository($entityClass);
        $repository->setControllerArguments(array());
        $viewHelper = new Reviews_Util_View($this->serviceManager);
        
        // parameter for used sorting field
        $sort = $this->request->query->filter('sort', '', FILTER_SANITIZE_STRING);
        if (empty($sort) || !in_array($sort, $repository->getAllowedSortingFields())) {
            $sort = $repository->getDefaultSortingField();
        }
        
        // parameter for used sort order
        $sdir = $this->request->query->filter('sortdir', '', FILTER_SANITIZE_STRING);
        $sdir = strtolower($sdir);
        if ($sdir != 'asc' && $sdir != 'desc') {
            $sdir = 'asc';
        }
        
        // convenience vars to make code clearer
        $currentUrlArgs = array('ot' => $objectType);
        
        $where = '';
        
        // we check for letter
        $letter = $this->request->query->filter('letter', NULL);
        
        if ($letter != NULL) {
            $where = 'tbl.title LIKE \'' . DataUtil::formatForStore($letter) . '%\'';
        }        
        $selectionArgs = array(
                'ot' => $objectType,
                'where' => $where,
                'orderBy' => $sort . ' ' . $sdir
        );
        
        $showOwnEntries = (int) $this->request->query->filter('own', $this->getVar('showOnlyOwnEntries', 0), FILTER_VALIDATE_INT);
        $showAllEntries = (int) $this->request->query->filter('all', 0, FILTER_VALIDATE_INT);
        
        if (!$showAllEntries) {
            $csv = (int) $this->request->query->filter('usecsvext', 0, FILTER_VALIDATE_INT);
            if ($csv == 1) {
                $showAllEntries = 1;
            }
        }
        
        $this->view->assign('showOwnEntries', $showOwnEntries)
        ->assign('showAllEntries', $showAllEntries);
        if ($showOwnEntries == 1) {
            $currentUrlArgs['own'] = 1;
        }
        if ($showAllEntries == 1) {
            $currentUrlArgs['all'] = 1;
        }
        
        // prepare access level for cache id
        $accessLevel = ACCESS_READ;
        $component = 'Reviews:' . ucwords($objectType) . ':';
        $instance = '::';
        if (SecurityUtil::checkPermission($component, $instance, ACCESS_COMMENT)) {
            $accessLevel = ACCESS_COMMENT;
        }
        if (SecurityUtil::checkPermission($component, $instance, ACCESS_EDIT)) {
            $accessLevel = ACCESS_EDIT;
        }
        
        $templateFile = $viewHelper->getViewTemplate($this->view, 'user', $objectType, 'view', array());
        $cacheId = 'view|ot_' . $objectType . '_sort_' . $sort . '_' . $sdir;
        $resultsPerPage = 0;
        if ($showAllEntries == 1) {
            // set cache id
            $this->view->setCacheId($cacheId . '_all_1_own_' . $showOwnEntries . '_' . $accessLevel);
        
            // if page is cached return cached content
            if ($this->view->is_cached($templateFile)) {
                return $viewHelper->processTemplate($this->view, 'user', $objectType, 'view', array(), $templateFile);
            }
        
            // retrieve item list without pagination
            $entities = ModUtil::apiFunc($this->name, 'selection', 'getEntities', $selectionArgs);
        } else {
            // the current offset which is used to calculate the pagination
            $currentPage = (int) $this->request->query->filter('pos', 1, FILTER_VALIDATE_INT);
        
            // the number of items displayed on a page for pagination
            $resultsPerPage = (int) $this->request->query->filter('num', 0, FILTER_VALIDATE_INT);
            if ($resultsPerPage == 0) {
                $resultsPerPage = $this->getVar('pageSize', 10);
            }
        
            // set cache id
            $this->view->setCacheId($cacheId . '_amount_' . $resultsPerPage . '_page_' . $currentPage . '_own_' . $showOwnEntries . '_' . $accessLevel);
        
            // if page is cached return cached content
            if ($this->view->is_cached($templateFile)) {
                return $viewHelper->processTemplate($this->view, 'user', $objectType, 'view', array(), $templateFile);
            }
        
            // retrieve item list with pagination
            $selectionArgs['currentPage'] = $currentPage;
            $selectionArgs['resultsPerPage'] = $resultsPerPage;
            list($entities, $objectCount) = ModUtil::apiFunc($this->name, 'selection', 'getEntitiesPaginated', $selectionArgs);
        
            $this->view->assign('currentPage', $currentPage)
            ->assign('pager', array('numitems'     => $objectCount,
                    'itemsperpage' => $resultsPerPage));
        }
        
        foreach ($entities as $k => $entity) {
            $entity->initWorkflow();
        }
        
        // build ModUrl instance for display hooks
        $currentUrlObject = new Zikula_ModUrl($this->name, 'user', 'view', ZLanguage::getLanguageCode(), $currentUrlArgs);
        
        // assign the object data, sorting information and details for creating the pager
        $this->view->assign('items', $entities)
        ->assign('sort', $sort)
        ->assign('sdir', $sdir)
        ->assign('pageSize', $resultsPerPage)
        ->assign('currentUrlObject', $currentUrlObject)
        ->assign('shorturls',System::getVar('shorturls'))
        ->assign($repository->getAdditionalTemplateParameters('controllerAction', $utilArgs));
        
        $modelHelper = new Reviews_Util_Model($this->serviceManager);
        $this->view->assign('canBeCreated', $modelHelper->canBeCreated($objectType));
        
        // fetch and return the appropriate template
        return $viewHelper->processTemplate($this->view, 'user', $objectType, 'view', array(), $templateFile);
        
        
        ///////////////////////Alter Code

        // Get parameters from whatever input we need
        $cat    = (string)FormUtil::getPassedValue('cat', isset($args['cat']) ? $args['cat'] : null, 'GET');
        $prop   = (string)FormUtil::getPassedValue('prop', isset($args['prop']) ? $args['prop'] : null, 'GET');
        $letter = (string)FormUtil::getPassedValue('letter', null, 'REQUEST');
        $page   = (int)FormUtil::getPassedValue('page', isset($args['page']) ? $args['page'] : 1, 'GET');

        // get all module vars for later use
        $modvars = ModUtil::getVar('Reviews');

        // defaults and input validation
        if (!is_numeric($page) || $page < 0) {
            $page = 1;
        }
        $startnum = (($page - 1) * $modvars['itemsperpage']) + 1;

        // check if categorisation is enabled
        if ($modvars['enablecategorization']) {
            // get the categories registered for Reviews
            $catregistry = CategoryRegistryUtil::getRegisteredModuleCategories('Reviews', 'reviews');
            $properties = array_keys($catregistry);

            // validate the property
            // and build the category filter - mateo
            if (!empty($properties) && in_array($prop, $properties)) {
                // if the property and the category are specified
                // means that we'll list the reviews that belongs to that category
                if (!empty($cat)) {
                    if (!is_numeric($cat)) {
                        $rootCat = CategoryUtil::getCategoryByID($catregistry[$prop]);
                        $cat = CategoryUtil::getCategoryByPath($rootCat['path'].'/'.$cat);
                    } else {
                        $cat = CategoryUtil::getCategoryByID($cat);
                    }
                    if (!empty($cat) && isset($cat['path'])) {
                        // include all it's subcategories and build the filter
                        $categories = categoryUtil::getCategoriesByPath($cat['path'], '', 'path');
                        $catstofilter = array();
                        foreach ($categories as $category) {
                            $catstofilter[] = $category['id'];
                        }
                        $catFilter = array($prop => $catstofilter);
                    } else {
                        LogUtil::registerError($this->__('Invalid category passed.'));
                    }
                }
            }
        }

        // Get all matching reviews
        /*$items = ModUtil::apiFunc('Reviews', 'user', 'getall',
                array('startnum' => $startnum,
                'numitems' => $modvars['itemsperpage'],
                'letter'   => $letter,
                'category' => isset($catFilter) ? $catFilter : null,
                'catregistry' => isset($catregistry) ? $catregistry : null));

        // assign all the necessary template variables
        $this->view->assign('items', $items);
        $this->view->assign('category', $cat);
        $this->view->assign('lang', ZLanguage::getLanguageCode());
        $this->view->assign($modvars);
        $this->view->assign('shorturls', System::getVar('shorturls'));
        $this->view->assign('shorturlstype', System::getVar('shorturlstype'));

        // Assign the values for the smarty plugin to produce a pager
        $this->view->assign('pager', array('numitems' => ModUtil::apiFunc('Reviews', 'user', 'countitems',
                array('letter' => $letter,
                'category' => isset($catFilter) ? $catFilter : null)),
                'itemsperpage' => $modvars['itemsperpage']));

        // fetch and return the appropriate template
        return $viewHelper->processTemplate($this->view, 'user', $objectType, 'view', array(), $templateFile);
        */
    }
    
    /**
     * This method provides a generic item detail view.
     *
     * @param string  $ot           Treated object type.
     * @param string  $tpl          Name of alternative template (for alternative display options, feeds and xml output)
     * @param boolean $raw          Optional way to display a template instead of fetching it (needed for standalone output)
     *
     * @return mixed Output.
     */
    public function display()
    {
        $controllerHelper = new Reviews_Util_Controller($this->serviceManager);
        
        // parameter specifying which type of objects we are treating
        $objectType = $this->request->query->filter('ot', 'review', FILTER_SANITIZE_STRING);
        $utilArgs = array('controller' => 'user', 'action' => 'display');
        if (!in_array($objectType, $controllerHelper->getObjectTypes('controllerAction', $utilArgs))) {
            $objectType = $controllerHelper->getDefaultObjectType('controllerAction', $utilArgs);
        }
        $this->throwForbiddenUnless(SecurityUtil::checkPermission($this->name . ':' . ucwords($objectType) . ':', '::', ACCESS_READ), LogUtil::getErrorMsgPermission());
        $entityClass = $this->name . '_Entity_' . ucwords($objectType);
        $repository = $this->entityManager->getRepository($entityClass);
        $repository->setControllerArguments(array());
        
        $idFields = ModUtil::apiFunc($this->name, 'selection', 'getIdFields', array('ot' => $objectType));
        
        // retrieve identifier of the object we wish to view
        $idValues = $controllerHelper->retrieveIdentifier($this->request, array(), $objectType, $idFields);
        $hasIdentifier = $controllerHelper->isValidIdentifier($idValues);
        
        // check for unique permalinks (without id)
        $hasSlug = false;
        $slug = '';
        if ($hasIdentifier === false) {
            $entityClass = $this->name . '_Entity_' . ucwords($objectType);
            $meta = $this->entityManager->getClassMetadata($entityClass);
            $hasSlug = $meta->hasField('slug') && $meta->isUniqueField('slug');
            if ($hasSlug) {
                $slug = $this->request->query->filter('slug', '', FILTER_SANITIZE_STRING);
                $hasSlug = (!empty($slug));
            }
        }
        $hasIdentifier |= $hasSlug;
        $this->throwNotFoundUnless($hasIdentifier, $this->__('Error! Invalid identifier received.'));
        
        $entity = ModUtil::apiFunc($this->name, 'selection', 'getEntity', array('ot' => $objectType, 'id' => $idValues, 'slug' => $slug));
        $this->throwNotFoundUnless($entity != null, $this->__('No such item.'));
        unset($idValues);
        
        $entity->initWorkflow();
        
        // build ModUrl instance for display hooks; also create identifier for permission check
        $currentUrlArgs = array('ot' => $objectType);
        $instanceId = '';
        foreach ($idFields as $idField) {
            $currentUrlArgs[$idField] = $entity[$idField];
            if (!empty($instanceId)) {
                $instanceId .= '_';
            }
            $instanceId .= $entity[$idField];
        }
        $currentUrlArgs['id'] = $instanceId;
        if (isset($entity['slug'])) {
            $currentUrlArgs['slug'] = $entity['slug'];
        }
        $currentUrlObject = new Zikula_ModUrl($this->name, 'user', 'display', ZLanguage::getLanguageCode(), $currentUrlArgs);
        
        $this->throwForbiddenUnless(SecurityUtil::checkPermission($this->name . ':' . ucwords($objectType) . ':', $instanceId . '::', ACCESS_READ), LogUtil::getErrorMsgPermission());
        
        $viewHelper = new Reviews_Util_View($this->serviceManager);
        $templateFile = $viewHelper->getViewTemplate($this->view, 'user', $objectType, 'display', array());
        
        // set cache id
        $component = $this->name . ':' . ucwords($objectType) . ':';
        $instance = $instanceId . '::';
        $accessLevel = ACCESS_READ;
        if (SecurityUtil::checkPermission($component, $instance, ACCESS_COMMENT)) {
            $accessLevel = ACCESS_COMMENT;
        }
        if (SecurityUtil::checkPermission($component, $instance, ACCESS_EDIT)) {
            $accessLevel = ACCESS_EDIT;
        }
        $this->view->setCacheId($objectType . '|' . $instanceId . '|a' . $accessLevel);
        
        // assign output data to view object.
        $this->view->assign($objectType, $entity)
                   ->assign('currentUrlObject', $currentUrlObject)
                   ->assign($repository->getAdditionalTemplateParameters('controllerAction', $utilArgs));
        
        
        //$controllerHelper = new Reviews_Util_Controller($this->serviceManager);
        $controllerHelper->addView($entity['id']);
        
        // fetch and return the appropriate template
        return $viewHelper->processTemplate($this->view, 'user', $objectType, 'display', array(), $templateFile);
    }
        

        
        
    

    /**
     * display item
     *
     * @return string HTML output
     */
   /* public function display($args)
    {
        $id       = FormUtil::getPassedValue('id', isset($args['id']) ? $args['id'] : null, 'REQUEST');
        $title    = FormUtil::getPassedValue('title', isset($args['title']) ? $args['title'] : null, 'REQUEST');
        $page     = FormUtil::getPassedValue('page', isset($args['page']) ? $args['page'] : 1, 'REQUEST');
        $objectid = FormUtil::getPassedValue('objectid', isset($args['objectid']) ? $args['objectid'] : null, 'REQUEST');
        if (!empty($objectid)) {
            $id = $objectid;
        }

        // Validate the essential parameters
        if ((empty($id) || !is_numeric($id)) && empty($title)) {
            return LogUtil::registerArgsError();
        }
        if (!empty($title)) {
            unset($id);
        }

        // increment the read count
        if ($page == 1) {
            if (isset($id)) {
                ModUtil::apiFunc('Reviews', 'user', 'incrementreadcount', array('id' => $id));
            } else {
                ModUtil::apiFunc('Reviews', 'user', 'incrementreadcount', array('title' => $title));
            }
        }

        // set the cache id
        if (isset($id)) {
            $this->view->cache_id = $id.$page;
        } else {
            $this->view->cache_id = $title.$page;
        }

        // check if the contents are cached.
        if ($this->view->is_cached('reviews_user_display.htm')) {
            return $this->view->fetch('reviews_user_display.htm');
        }

        // Get the review
        if (isset($id) && is_numeric($id)) {
            $item = ModUtil::apiFunc('Reviews', 'user', 'get', array('id' => $id));
        } else {
            $item = ModUtil::apiFunc('Reviews', 'user', 'get', array('title' => $title));
            System::queryStringSetVar('id', $item['id']);
        }

        if ($item === false) {
            return LogUtil::registerError($this->__('No such review found.'), 404);
        }

        // Explode the review into an array of seperate pages
        $allpages = explode('<!--pagebreak-->', $item['text']);
        unset($item['text']);

        // Set the item review to be the required page
        // nb arrays start from zero pages from one
        // check if the page does exists
        if (!isset($allpages[$page-1])) {
            return LogUtil::registerError($this->__('No such review page found.'), 404);
        }
        $item['text'] = $allpages[$page-1];
        $numpages = count($allpages);
        unset($allpages);

        if (!preg_match("/([\<])([^\>]{1,})*([\>])/i", $item['text'])) {
            $item['text'] = nl2br(trim($item['text']));
        }

        // Assign the item to the template
        $this->view->assign($item);

        // Now lets assign the informatation to create a pager for the review
        $this->view->assign('pager', array('numitems'     => $numpages,
                'itemsperpage' => 1));

        // Return the output that has been generated by this function
        return $this->view->fetch('reviews_user_display.htm');
    }*/
}