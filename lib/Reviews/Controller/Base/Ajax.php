<?php
/**
 * Reviews.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @package Reviews
 * @author Michael Ueberschaer <kontakt@webdesign-in-bremen.com>.
 * @link http://webdesign-in-bremen.com
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.6.2 (http://modulestudio.de).
 */

/**
 * Ajax controller class.
 */
class Reviews_Controller_Base_Ajax extends Zikula_Controller_AbstractAjax
{


    /**
     * This method is the default function handling the ajax area called without defining arguments.
     *
     *
     * @return mixed Output.
     */
    public function main()
    {
        $this->throwForbiddenUnless(SecurityUtil::checkPermission($this->name . '::', '::', ACCESS_OVERVIEW), LogUtil::getErrorMsgPermission());
    }
    
    
    /**
     * Retrieve item list for finder selections in Forms, Content type plugin and Scribite.
     *
     * @param string $ot      Name of currently used object type.
     * @param string $sort    Sorting field.
     * @param string $sortdir Sorting direction.
     *
     * @return Zikula_Response_Ajax
     */
    public function getItemListFinder()
    {
        if (!SecurityUtil::checkPermission($this->name . '::Ajax', '::', ACCESS_EDIT)) {
            return true;
        }
    
        $objectType = 'review';
        if ($this->request->isPost() && $this->request->request->has('ot')) {
            $objectType = $this->request->request->filter('ot', 'review', FILTER_SANITIZE_STRING);
        } elseif ($this->request->isGet() && $this->request->query->has('ot')) {
            $objectType = $this->request->query->filter('ot', 'review', FILTER_SANITIZE_STRING);
        }
        $controllerHelper = new Reviews_Util_Controller($this->serviceManager);
        $utilArgs = array('controller' => 'ajax', 'action' => 'getItemListFinder');
        if (!in_array($objectType, $controllerHelper->getObjectTypes('controllerAction', $utilArgs))) {
            $objectType = $controllerHelper->getDefaultObjectType('controllerAction', $utilArgs);
        }
    
        $entityClass = 'Reviews_Entity_' . ucfirst($objectType);
        $repository = $this->entityManager->getRepository($entityClass);
        $repository->setControllerArguments(array());
        $idFields = ModUtil::apiFunc($this->name, 'selection', 'getIdFields', array('ot' => $objectType));
    
        $descriptionField = $repository->getDescriptionFieldName();
    
        $sort = $this->request->request->filter('sort', '', FILTER_SANITIZE_STRING);
        if (empty($sort) || !in_array($sort, $repository->getAllowedSortingFields())) {
            $sort = $repository->getDefaultSortingField();
        }
    
        $sdir = $this->request->request->filter('sortdir', '', FILTER_SANITIZE_STRING);
        $sdir = strtolower($sdir);
        if ($sdir != 'asc' && $sdir != 'desc') {
            $sdir = 'asc';
        }
    
        $where = ''; // filters are processed inside the repository class
        $sortParam = $sort . ' ' . $sdir;
    
        $entities = $repository->selectWhere($where, $sortParam);
    
        $slimItems = array();
        $component = $this->name . ':' . ucwords($objectType) . ':';
        foreach ($entities as $item) {
            $itemId = '';
            foreach ($idFields as $idField) {
                $itemId .= ((!empty($itemId)) ? '_' : '') . $item[$idField];
            }
            if (!SecurityUtil::checkPermission($component, $itemId . '::', ACCESS_READ)) {
                continue;
            }
            $slimItems[] = $this->prepareSlimItem($objectType, $item, $itemId, $descriptionField);
        }
    
        return new Zikula_Response_Ajax($slimItems);
    }
    
    /**
     * Builds and returns a slim data array from a given entity.
     *
     * @param string $objectType       The currently treated object type.
     * @param object $item             The currently treated entity.
     * @param string $itemid           Data item identifier(s).
     * @param string $descriptionField Name of item description field.
     *
     * @return array The slim data representation.
     */
    protected function prepareSlimItem($objectType, $item, $itemId, $descriptionField)
    {
        $view = Zikula_View::getInstance('Reviews', false);
        $view->assign($objectType, $item);
        $previewInfo = base64_encode($view->fetch('external/' . $objectType . '/info.tpl'));
    
        $title = $item->getTitleFromDisplayPattern();
        $description = ($descriptionField != '') ? $item[$descriptionField] : '';
    
        return array('id'          => $itemId,
                     'title'       => str_replace('&amp;', '&', $title),
                     'description' => $description,
                     'previewInfo' => $previewInfo);
    }
    
    /**
     * Checks whether a field value is a duplicate or not.
     *
     * @param string $ot Treated object type.
     * @param string $fn Name of field to be checked.
     * @param string $v  The value to be checked for uniqueness.
     * @param string $ex Optional identifier to be excluded from search.
     *
     * @return Zikula_Response_Ajax
     */
    public function checkForDuplicate()
    {
        $this->checkAjaxToken();
        $this->throwForbiddenUnless(SecurityUtil::checkPermission($this->name . '::Ajax', '::', ACCESS_EDIT));
    
        $postData = $this->request->request;
        
        $objectType = $postData->filter('ot', 'review', FILTER_SANITIZE_STRING);
        $controllerHelper = new Reviews_Util_Controller($this->serviceManager);
        $utilArgs = array('controller' => 'ajax', 'action' => 'checkForDuplicate');
        if (!in_array($objectType, $controllerHelper->getObjectTypes('controllerAction', $utilArgs))) {
            $objectType = $controllerHelper->getDefaultObjectType('controllerAction', $utilArgs);
        }
        
        $fieldName = $postData->filter('fn', '', FILTER_SANITIZE_STRING);
        $value = $postData->get('v', '');
        
        if (empty($fieldName) || empty($value)) {
            return new Zikula_Response_Ajax_BadData($this->__('Error: invalid input.'));
        }
        
        // check if the given field is existing and unique
        $uniqueFields = array();
        switch ($objectType) {
            case 'review':
                    $uniqueFields = array('slug');
                    break;
        }
        if (!count($uniqueFields) || !in_array($fieldName, $uniqueFields)) {
            return new Zikula_Response_Ajax_BadData($this->__('Error: invalid input.'));
        }
        
        $exclude = $postData->get('ex', '');
    
        $entityClass = 'Reviews_Entity_' . ucfirst($objectType);
        $object = new $entityClass(); 
    
        $result = false;
        switch ($objectType) {
        case 'review':
            $repository = $this->entityManager->getRepository($entityClass);
            switch ($fieldName) {
            case 'slug':
                    $entity = $repository->selectBySlug($value, false, $exclude);
                    $result = ($entity != null && isset($entity['slug']));
                    break;
            }
            break;
        }
    
        // return response
        $result = array('isDuplicate' => $result);
    
        return new Zikula_Response_Ajax($result);
    }
}
