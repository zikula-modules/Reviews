<?php
/**
 * Zikula Application Framework
 *
 * @copyright (c) 2002, Zikula Development Team
 * @link http://www.zikula.org
 * @version $Id: Admin.php 445 2010-07-06 16:09:10Z drak $
 * @license GNU/GPL - http://www.gnu.org/copyleft/gpl.html
 * @package Zikula_Value_Addons
 * @subpackage Reviews
 */

class Reviews_Controller_Admin extends Zikula_AbstractController 
{
    protected function postInitialize()
    {
        $this->view->setCaching(false);
    }

    /**
     * the main administration function
     *
     * @return string HTML output
     */
    public function main()
    {
        // Security check
        if (!SecurityUtil::checkPermission('Reviews::', '::', ACCESS_EDIT)) {
            return LogUtil::registerPermissionError();
        }

        // Return the output that has been generated by this function
        return $this->view->fetch('reviews_admin_main.htm');
    }

    /**
     * create a new news article
     * this function is purely a wrapper for the output from news_user_new
     * @author Mark West
     * @return string HTML string
     */
    public function newreview()
    {
        // Return the output that has been generated by this function
        return ModUtil::func('Reviews', 'user', 'newreview');
    }

    /**
     * modify an item
     *
     * @param 'id' the id of the item to be modified
     * @return string HTML output
     */
    public function modify($args)
    {
        // Get parameters from whatever input we need
        $id       = (int)FormUtil::getPassedValue('id', isset($args['id']) ? $args['id'] : null, 'REQUEST');
        $objectid = (int)FormUtil::getPassedValue('objectid', isset($args['objectid']) ? $args['objectid'] : null, 'REQUEST');
        // At this stage we check to see if we have been passed $objectid
        if ($objectid) {
            $id = $objectid;
        }

        // Validate the essential parameters
        if (empty($id)) {
            return LogUtil::registerArgsError();
        }

        // Get the review
        $item = ModUtil::apiFunc('Reviews', 'user', 'get', array('id' => $id));

        if ($item === false) {
            return LogUtil::registerError($this->__('No such review found.'), 404);
        }

        // Security check
        if (!SecurityUtil::checkPermission('Reviews::', "$item[title]::$id", ACCESS_EDIT)) {
            return LogUtil::registerPermissionError();
        }

        // Get the module configuration vars
        $modvars = ModUtil::getVar('Reviews');

        if ($modvars['enablecategorization']) {
            // load the category registry util
            if (!Loader::loadClass('CategoryRegistryUtil')) {
                z_exit($this->__f('Error! Unable to load class [%s]', 'CategoryRegistryUtil'));
            }
            $catregistry = CategoryRegistryUtil::getRegisteredModuleCategories ('Reviews', 'reviews');

            $this->view->assign('catregistry', $catregistry);
        }

        // Assign item to template
        $this->view->assign($item);

        // Pass the module configuration to the template
        $this->view->assign($modvars);

        // try to guarantee that only one person at a time can be editing this componentVersion
        ModUtil::apiFunc('PageLock', 'user', 'pageLock',
                array('lockName' => "review{$item['id']}",
                'returnUrl' => ModUtil::url('Review', 'admin', 'view')));

        // Return the output that has been generated by this function
        return $this->view->fetch('reviews_admin_modify.htm');
    }

    /**
     * update review
     *
     * @param 'id' the id of the item to be updated
     * @param 'name' the name of the item to be updated
     * @param 'number' the number of the item to be updated
     */
    public function update($args)
    {
        // Confirm authorisation code
        if (!SecurityUtil::confirmAuthKey()) {
            return LogUtil::registerAuthidError(ModUtil::url('Reviews', 'admin', 'view'));
        }

        $review = FormUtil::getPassedValue('review', isset($args['review']) ? $args['review'] : null, 'POST');
        if (!empty($review['objectid'])) {
            $review['id'] = $review['objectid'];
        }

        // Validate the essential parameters
        if (empty($review['id'])) {
            return LogUtil::registerArgsError();
        }

        // Notable by its absence there is no security check here
        // Update the review
        if (ModUtil::apiFunc('Reviews', 'admin', 'update', $review)) {
            // Success
            LogUtil::registerStatus($this->__('Done! Review updated.'));
        }

        ModUtil::apiFunc('PageLock', 'user', 'releaseLock',
                array('lockName' => "review{$review['id']}"));

        return System::redirect(ModUtil::url('Reviews', 'admin', 'view'));
    }

    /**
     * delete item
     *
     * @param 'id' the id of the item to be deleted
     * @param 'confirmation' confirmation that this item can be deleted
     * @return mixed string HTML output if no confirmation otherwise true
     */
    public function delete($args)
    {
        $id           = FormUtil::getPassedValue('id', isset($args['id']) ? $args['id'] : null, 'REQUEST');
        $objectid     = FormUtil::getPassedValue('objectid', isset($args['objectid']) ? $args['objectid'] : null, 'REQUEST');
        $confirmation = FormUtil::getPassedValue('confirmation', null, 'POST');
        if (!empty($objectid)) {
            $id = $objectid;
        }

        // Validate the essential parameters
        if (empty($id)) {
            return LogUtil::registerArgsError();
        }

        // Get the existing review
        $item = ModUtil::apiFunc('Reviews', 'user', 'get', array('id' => $id));

        if ($item === false) {
            return LogUtil::registerError($this->__('No such review found.'), 404);
        }

        // Security check
        if (!SecurityUtil::checkPermission('Reviews::', "$item[title]::$id", ACCESS_DELETE)) {
            return LogUtil::registerPermissionError();
        }

        // Check for confirmation.
        if (empty($confirmation)) {
            // No confirmation yet
            // Add a hidden variable for the item id
            $this->view->assign('id', $id);

            // Return the output that has been generated by this function
            return $this->view->fetch('reviews_admin_delete.htm');
        }

        // If we get here it means that the user has confirmed the action

        // Confirm authorisation code
        if (!SecurityUtil::confirmAuthKey()) {
            return LogUtil::registerAuthidError (ModUtil::url('Reviews', 'admin', 'view'));
        }

        // Delete the review
        if (ModUtil::apiFunc('Reviews', 'admin', 'delete', array('id' => $id))) {
            // Success
            LogUtil::registerStatus($this->__('Done! Review deleted.'));
        }

        return System::redirect(ModUtil::url('Reviews', 'admin', 'view'));
    }

    /**
     * view items
     *
     * @param int $startnum the start item id for the pager
     * @return string html string
     */
    public function view($args)
    {
        // Security check
        if (!SecurityUtil::checkPermission('Reviews::', '::', ACCESS_EDIT)) {
            return LogUtil::registerPermissionError();
        }

        $startnum = (int)FormUtil::getPassedValue('startnum', isset($args['startnum']) ? $args['startnum'] : null, 'GET');
        $property = FormUtil::getPassedValue('reviews_property', isset($args['reviews_property']) ? $args['reviews_property'] : null, 'POST');
        $category = FormUtil::getPassedValue("reviews_{$property}_category", isset($args["reviews_{$property}_category"]) ? $args["reviews_{$property}_category"] : null, 'POST');
        $clear    = FormUtil::getPassedValue('clear', false, 'POST');
        $purge    = FormUtil::getPassedValue('purge', false, 'GET');

        if ($purge) {
            if (ModUtil::apiFunc('Reviews', 'admin', 'purgepermalinks')) {
                LogUtil::registerStatus($this->__('Purging of the pemalinks was successful'));
            } else {
                LogUtil::registerError($this->__('Purging of the pemalinks has failed'));
            }
            return System::redirect(strpos(System::serverGetVar('HTTP_REFERER'), 'purge') ? ModUtil::url('Reviews', 'admin', 'view') : System::serverGetVar('HTTP_REFERER'));
        }
        if ($clear) {
            $property = null;
            $category = null;
        }

        // get module vars for later use
        $modvars = ModUtil::getVar('Reviews');

        if ($modvars['enablecategorization']) {
            // load the category registry util
            if (!Loader::loadClass('CategoryRegistryUtil')) {
                z_exit($this->__f('Error! Unable to load class [%s]', 'CategoryRegistryUtil'));
            }
            $catregistry  = CategoryRegistryUtil::getRegisteredModuleCategories('Reviews', 'reviews');
            $properties = array_keys($catregistry);

            // Validate and build the category filter - mateo
            if (!empty($property) && in_array($property, $properties) && !empty($category)) {
                $catFilter = array($property => $category);
            }

            // Assign a default property - mateo
            if (empty($property) || !in_array($property, $properties)) {
                $property = $properties[0];
            }

            // plan ahead for ML features
            $propArray = array();
            foreach ($properties as $prop) {
                $propArray[$prop] = $prop;
            }
        }

        // Get all matching reviews
        $items = ModUtil::apiFunc('Reviews', 'user', 'getall',
                array('startnum'    => $startnum,
                'numitems'    => $modvars['itemsperpage'],
                'category'    => isset($catFilter) ? $catFilter : null,
                'catregistry' => isset($catregistry) ? $catregistry : null));

        if (!$items) {
            $items = array();
        }

        $reviewsitems = array();
        foreach ($items as $item)
        {
            $options = array();
            $options[] = array('url'   => ModUtil::url('Reviews', 'user', 'display', array('id' => $item['id'])),
                    'image' => 'demo.gif',
                    'title' => $this->__('View'));

            if (SecurityUtil::checkPermission('Reviews::', "$item[title]::$item[id]", ACCESS_EDIT)) {
                $options[] = array('url' => ModUtil::url('Reviews', 'admin', 'modify', array('id' => $item['id'])),
                        'image' => 'xedit.gif',
                        'title' => $this->__('Edit'));

                if (SecurityUtil::checkPermission('Reviews::', "$item[title]::$item[id]", ACCESS_DELETE)) {
                    $options[] = array('url' => ModUtil::url('Reviews', 'admin', 'delete', array('id' => $item['id'])),
                            'image' => '14_layer_deletelayer.gif',
                            'title' => $this->__('Delete'));
                }
            }

            // Add the calculated menu options to the item array
            $item['options'] = $options;
            $reviewsitems[] = $item;
        }

        // Assign the items to the template
        $this->view->assign('reviews', $reviewsitems);

        // assign the module vars
        $this->view->assign($modvars);

        // Assign the default language
        $this->view->assign('lang', ZLanguage::getLanguageCode());

        // Assign the categories information if enabled
        if ($modvars['enablecategorization']) {
            $this->view->assign('catregistry', $catregistry);
            $this->view->assign('numproperties', count($propArray));
            $this->view->assign('properties', $propArray);
            $this->view->assign('property', $property);
            $this->view->assign("category", $category);
        }

        // Assign the values for the smarty plugin to produce a pager
        $this->view->assign('pager', array('numitems'     => ModUtil::apiFunc('Reviews', 'user', 'countitems', array('category' => isset($catFilter) ? $catFilter : null)),
                'itemsperpage' => $modvars['itemsperpage']));

        // Return the output that has been generated by this function
        return $this->view->fetch('reviews_admin_view.htm');
    }

    /**
     * This is a standard function to modify the configuration parameters of the
     * module
     *
     * @return string HTML output
     */
    public function modifyconfig()
    {
        // Security check
        if (!SecurityUtil::checkPermission('Reviews::', '::', ACCESS_ADMIN)) {
            return LogUtil::registerPermissionError();
        }

        // Assign all module vars
        $this->view->assign(ModUtil::getVar('Reviews'));

        // Return the output that has been generated by this function
        return $this->view->fetch('reviews_admin_modifyconfig.htm');
    }

    /**
     * This is a standard function to update the configuration parameters of the
     * module given the information passed back by the modification form
     */
    public function updateconfig()
    {
        // Security check
        if (!SecurityUtil::checkPermission('Reviews::', '::', ACCESS_ADMIN)) {
            return LogUtil::registerPermissionError();
        }

        // Confirm authorisation code
        if (!SecurityUtil::confirmAuthKey()) {
            return LogUtil::registerAuthidError(ModUtil::url('Reviews', 'admin', 'view'));
        }

        // Update module variables
        $itemsperpage = (int)FormUtil::getPassedValue('itemsperpage', 25, 'POST');
        if ($itemsperpage < 1) {
            $itemsperpage = 25;
        }
        $this->setVar('itemsperpage', $itemsperpage);

        $enablecategorization = (bool)FormUtil::getPassedValue('enablecategorization', false, 'POST');
        $this->setVar('enablecategorization', $enablecategorization);
        
        $addcategorytitletopermalink = (bool)FormUtil::getPassedValue('addcategorytitletopermalink', false, 'POST');
        $this->setVar('addcategorytitletopermalink', $addcategorytitletopermalink);

        // Let any other modules know that the modules configuration has been updated
        ModUtil::callHooks('module', 'updateconfig', 'Reviews', array('module' => 'Reviews'));

        // the module configuration has been updated successfuly
        LogUtil::registerStatus($this->__('Done! Module configuration updated.'));

        return System::redirect(ModUtil::url('Reviews', 'admin', 'view'));
    }
}