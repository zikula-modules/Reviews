<?php
/**
 * Reviews.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @package Reviews
 * @author Michael Ueberschaer <kontakt@webdesign-in-bremen.com>.
 * @link http://webdesign-in-bremen.com
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.6.0 (http://modulestudio.de) at Sat Aug 10 17:43:07 CEST 2013.
 */

/**
 * Repository class used to implement own convenience methods for performing certain DQL queries.
 *
 * This is the concrete repository class for review entities.
 */
class Reviews_Entity_Repository_Review extends Reviews_Entity_Repository_Base_Review
{
    /**
     * Adds default filters as where clauses.
     *
     * @param Doctrine\ORM\QueryBuilder $qb         Query builder to be enhanced.
     * @param array                     $parameters List of determined filter options.
     *
     * @return Doctrine\ORM\QueryBuilder Enriched query builder instance.
     */
    protected function applyDefaultFilters(QueryBuilder $qb, $parameters = array())
    {
        $currentModule = ModUtil::getName();//FormUtil::getPassedValue('module', '', 'GETPOST');
        $currentType = FormUtil::getPassedValue('type', 'user', 'GETPOST');
        if ($currentType == 'admin' && ($currentModule == 'Reviews' || $currentModule == 'Extensions')) {
            return $qb;
        }
    
        if (!in_array('workflowState', array_keys($parameters)) || empty($parameters['workflowState'])) {
            // per default we show approved reviews only
            $onlineStates = array('approved');
            $qb->andWhere('tbl.workflowState IN (:onlineStates)')
               ->setParameter('onlineStates', $onlineStates);
        }
    
        return $qb;
    }
    
    /**
     * Builds a generic Doctrine query supporting WHERE and ORDER BY.
     *
     * @param string  $where    The where clause to use when retrieving the collection (optional) (default='').
     * @param string  $orderBy  The order-by clause to use when retrieving the collection (optional) (default='').
     * @param boolean $useJoins Whether to include joining related objects (optional) (default=true).
     * @param boolean $slimMode If activated only some basic fields are selected without using any joins (optional) (default=false).
     *
     * @return Doctrine\ORM\QueryBuilder query builder instance to be further processed
     */
    public function genericBaseQuery($where = '', $orderBy = '', $useJoins = true, $slimMode = false)
    {
        // normally we select the whole table
        $selection = 'tbl';
    
        if ($slimMode === true) {
            // but for the slim version we select only the basic fields, and no joins
    
            $selection = 'tbl.id';
    
    
            $selection .= ', tbl.title';
            $selection .= ', tbl.slug';
            $useJoins = false;
        }
    
        if ($useJoins === true) {
            $selection .= $this->addJoinsToSelection();
        }
    
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->select($selection)
        ->from('Reviews_Entity_Review', 'tbl');
    
        if ($useJoins === true) {
            $this->addJoinsToFrom($qb);
        }
    
        // we get a request object
        $request = new Zikula_Request_Http();
        
        $type = $request->query->filter('type', 'admin');
        $func = $request->query->filter('func', 'main');
        
        if ($type == 'user' && $func == 'main') {
        $qb->setMaxResults(10);
        }
    
        $this->genericBaseQueryAddWhere($qb, $where);
        $this->genericBaseQueryAddOrderBy($qb, $orderBy);
    
        return $qb;
    }
}
